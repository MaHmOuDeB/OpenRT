#pragma once

#define OPENRT_VERSION_MAJOR @OPENRT_VERSION_MAJOR@
#define OPENRT_VERSION_MINOR @OPENRT_VERSION_MINOR@
#define OPENRT_VERSION_PATCH @OPENRT_VERSION_PATCH@

#cmakedefine DEBUG_MODE			
#cmakedefine DEBUG_PRINT_INFO	
#cmakedefine ENABLE_BSP	
#cmakedefine ENABLE_SUPERSAMPLING
#cmakedefine ENABLE_PPL
#cmakedefine ENABLE_AMP


#include <optional>
#include <vector>
#include <memory>
#include <thread>
#include <math.h>
#ifdef ENABLE_PPL
#include <ppl.h>
#include "concrtrm.h"
#endif
#ifdef ENABLE_AMP
#include <amp.h>
#endif
#include "opencv2/opencv.hpp"

using namespace cv;

#ifdef _WIN32
	using byte	= unsigned __int8;
	using word	= unsigned __int16;
	using dword	= unsigned __int32;
	using qword	= unsigned __int64;
#else
	using byte	= uint8_t;
	using word	= uint16_t;
	using dword	= uint32_t;
	using qword	= uint64_t;
#endif

static const double	Pi	= 3.1415926;			///< Pi number
static const float	Pif	= 3.1415926f;			///< Pi number

static const float Epsilon = 1E-3f;

template <class T>  T& lvalue_cast(T&& t) { return t; }
#ifdef _WIN32
	#define EmptyMat	Mat()	
	#define DllExport	__declspec(dllexport)
#else
	#define EmptyMat	lvalue_cast(Mat())	
	#define DllExport
#endif

namespace rt { 
    static const size_t maxRayCounter = @MAX_RAY_COUNTER@;
#define RGB(r, g, b)  Vec3f((b), (g), (r))
}